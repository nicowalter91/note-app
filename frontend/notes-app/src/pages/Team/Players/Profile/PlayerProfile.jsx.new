import React, { useState, useEffect } from 'react';
import Layout from '../../../../components/Layout/Layout';
import { useParams, useNavigate } from 'react-router-dom';
import { 
    FaArrowLeft, FaEdit, FaUser, FaRunning, FaMedal, FaChartLine, 
    FaBandAid, FaNotesMedical, FaTrophy, FaClipboardList, FaUserFriends, 
    FaCalendarAlt, FaComment, FaDownload, FaChartBar, FaCaretUp, FaCaretDown
} from 'react-icons/fa';
import { calculatePlayerScore, getScoreRating } from '../../../../utils/playerScoreUtils.jsx';
import { getPlayerById } from '../../../../utils/playerService';

const PlayerProfile = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [player, setPlayer] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [activeTab, setActiveTab] = useState('overview');

    // Fetch player data from API
    useEffect(() => {
        const fetchPlayerData = async () => {
            try {
                setLoading(true);
                const playerData = await getPlayerById(id);
                console.log('Spielerdaten von API in Profil:', playerData);
                setPlayer(playerData);
                setError(null);
            } catch (err) {
                console.error('Fehler beim Laden des Spielers:', err);
                setError('Fehler beim Laden des Spielers. Bitte versuchen Sie es später erneut.');
            } finally {
                setLoading(false);
            }
        };
        
        fetchPlayerData();
    }, [id]);

    const getStatusColor = (status) => {
        switch (status) {
            case 'Available': return 'bg-emerald-50 text-emerald-700 border-emerald-200';
            case 'Injured': return 'bg-red-50 text-red-700 border-red-200';
            case 'Away': return 'bg-amber-50 text-amber-700 border-amber-200';
            default: return 'bg-gray-50 text-gray-700 border-gray-200';
        }
    };

    const getStatusIcon = (status) => {
        switch (status) {
            case 'Available': return <FaCheck className="text-emerald-500" />;
            case 'Injured': return <FaExclamation className="text-red-500" />;
            case 'Away': return <FaExclamation className="text-amber-500" />;
            default: return null;
        }
    };

    const getTabClass = (tabName) => {
        return `px-4 py-2 text-sm font-medium border-b-2 ${
            activeTab === tabName 
                ? 'border-blue-500 text-blue-600' 
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
        }`;
    };

    const renderTabContent = () => {
        if (!player) return null;

        const score = player.physicalAttributes && player.skills ? calculatePlayerScore(player) : 0;
        const rating = getScoreRating(score);

        switch (activeTab) {
            case 'overview':
                return (
                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                        {/* Left Column */}
                        <div className="lg:col-span-2 space-y-6">
                            {/* Base Info */}
                            <div className="bg-white rounded-xl shadow-sm p-6">
                                <h3 className="text-lg font-semibold text-gray-800 mb-4">Basisdaten</h3>
                                <div className="grid grid-cols-2 gap-4">
                                    <div>
                                        <p className="text-sm text-gray-500">Position</p>
                                        <p className="font-medium">{player.position}</p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-500">Trikotnummer</p>
                                        <p className="font-medium">#{player.number}</p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-500">Alter</p>
                                        <p className="font-medium">{player.age} Jahre</p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-500">Geburtsdatum</p>
                                        <p className="font-medium">{player.dob}</p>
                                    </div>
                                    {player.height && (
                                        <div>
                                            <p className="text-sm text-gray-500">Größe</p>
                                            <p className="font-medium">{player.height} cm</p>
                                        </div>
                                    )}
                                    {player.weight && (
                                        <div>
                                            <p className="text-sm text-gray-500">Gewicht</p>
                                            <p className="font-medium">{player.weight} kg</p>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Stats */}
                            {player.stats && (
                                <div className="bg-white rounded-xl shadow-sm p-6">
                                    <h3 className="text-lg font-semibold text-gray-800 mb-4">Statistiken</h3>
                                    <div className="grid grid-cols-3 gap-4">
                                        <div>
                                            <p className="text-sm text-gray-500">Spiele</p>
                                            <p className="font-medium">{player.stats.games || 0}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm text-gray-500">Tore</p>
                                            <p className="font-medium">{player.stats.goals || 0}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm text-gray-500">Vorlagen</p>
                                            <p className="font-medium">{player.stats.assists || 0}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm text-gray-500">Gelbe Karten</p>
                                            <p className="font-medium">{player.stats.yellowCards || 0}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm text-gray-500">Rote Karten</p>
                                            <p className="font-medium">{player.stats.redCards || 0}</p>
                                        </div>
                                        <div>
                                            <p className="text-sm text-gray-500">Spielminuten</p>
                                            <p className="font-medium">{player.stats.minutesPlayed || 0}</p>
                                        </div>
                                        {player.position === 'GK' && (
                                            <>
                                                <div>
                                                    <p className="text-sm text-gray-500">Zu-Null-Spiele</p>
                                                    <p className="font-medium">{player.stats.cleanSheets || 0}</p>
                                                </div>
                                                <div>
                                                    <p className="text-sm text-gray-500">Paraden</p>
                                                    <p className="font-medium">{player.stats.saves || 0}</p>
                                                </div>
                                                <div>
                                                    <p className="text-sm text-gray-500">Paradenquote</p>
                                                    <p className="font-medium">{player.stats.savesPercentage || 0}%</p>
                                                </div>
                                            </>
                                        )}
                                    </div>
                                </div>
                            )}

                            {/* Skills */}
                            {player.skills && (
                                <div className="bg-white rounded-xl shadow-sm p-6">
                                    <h3 className="text-lg font-semibold text-gray-800 mb-4">Fähigkeiten</h3>
                                    <div className="grid grid-cols-2 gap-x-6 gap-y-3">
                                        {Object.entries(player.skills).map(([skill, value]) => (
                                            <div key={skill} className="flex items-center justify-between">
                                                <span className="text-sm capitalize">{skill}</span>
                                                <div className="flex items-center">
                                                    <div className="w-24 h-2 bg-gray-200 rounded-full overflow-hidden">
                                                        <div 
                                                            className="h-full bg-blue-500" 
                                                            style={{ width: `${value}%` }}
                                                        ></div>
                                                    </div>
                                                    <span className="text-xs font-medium ml-2">{value}</span>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {/* Physical Attributes */}
                            {player.physicalAttributes && (
                                <div className="bg-white rounded-xl shadow-sm p-6">
                                    <h3 className="text-lg font-semibold text-gray-800 mb-4">Physische Attribute</h3>
                                    <div className="grid grid-cols-2 gap-x-6 gap-y-3">
                                        {Object.entries(player.physicalAttributes).map(([attr, value]) => (
                                            <div key={attr} className="flex items-center justify-between">
                                                <span className="text-sm capitalize">{attr}</span>
                                                <div className="flex items-center">
                                                    <div className="w-24 h-2 bg-gray-200 rounded-full overflow-hidden">
                                                        <div 
                                                            className="h-full bg-emerald-500" 
                                                            style={{ width: `${value}%` }}
                                                        ></div>
                                                    </div>
                                                    <span className="text-xs font-medium ml-2">{value}</span>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Right Column */}
                        <div className="space-y-6">
                            {/* Overall Score */}
                            <div className="bg-white rounded-xl shadow-sm p-6 text-center">
                                <h3 className="text-lg font-semibold text-gray-800 mb-4">Gesamtbewertung</h3>
                                <div className="flex items-center justify-center mb-3">
                                    <div className="w-24 h-24 bg-gray-50 rounded-full flex items-center justify-center border-4 border-blue-100">
                                        <div className="text-center">
                                            <div className="text-3xl font-bold text-blue-600">{score}</div>
                                            <div className="text-xs font-medium text-gray-500">{rating}</div>
                                        </div>
                                    </div>
                                </div>
                                <div className="text-sm text-gray-500">
                                    Basierend auf Fähigkeiten, physischen Attributen und Statistiken
                                </div>
                            </div>

                            {/* Team Role */}
                            {player.teamRole && (
                                <div className="bg-white rounded-xl shadow-sm p-6">
                                    <h3 className="text-lg font-semibold text-gray-800 mb-4">Teamrolle</h3>
                                    {player.teamRole.leadership && (
                                        <div className="mb-4">
                                            <p className="text-sm text-gray-500">Führungsrolle</p>
                                            <p className="font-medium">{player.teamRole.leadership}</p>
                                        </div>
                                    )}
                                    {player.teamRole.preferredPartners && player.teamRole.preferredPartners.length > 0 && (
                                        <div className="mb-4">
                                            <p className="text-sm text-gray-500">Bevorzugte Mitspieler</p>
                                            <div className="flex flex-wrap gap-1 mt-1">
                                                {player.teamRole.preferredPartners.map((partner, idx) => (
                                                    <span key={idx} className="text-xs bg-gray-100 px-2 py-1 rounded-full">
                                                        {partner}
                                                    </span>
                                                ))}
                                            </div>
                                        </div>
                                    )}
                                    {player.teamRole.chemistry && (
                                        <div>
                                            <p className="text-sm text-gray-500">Teamchemie</p>
                                            <p className="font-medium">{player.teamRole.chemistry}</p>
                                        </div>
                                    )}
                                </div>
                            )}

                            {/* Status */}
                            <div className="bg-white rounded-xl shadow-sm p-6">
                                <h3 className="text-lg font-semibold text-gray-800 mb-4">Status</h3>
                                <div className="flex items-center">
                                    <div className={`px-3 py-1 rounded-full text-sm flex items-center ${getStatusColor(player.status)}`}>
                                        {getStatusIcon(player.status)}
                                        <span className="ml-1">{player.status}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            case 'medical':
                return (
                    <div className="space-y-6">
                        {/* Injury History */}
                        <div className="bg-white rounded-xl shadow-sm p-6">
                            <h3 className="text-lg font-semibold text-gray-800 mb-4">Verletzungshistorie</h3>
                            {player.injuries && player.injuries.length > 0 ? (
                                <div className="overflow-x-auto">
                                    <table className="min-w-full divide-y divide-gray-200">
                                        <thead className="bg-gray-50">
                                            <tr>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Verletzung</th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Datum</th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dauer</th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white divide-y divide-gray-200">
                                            {player.injuries.map((injury, idx) => (
                                                <tr key={idx}>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm">{injury.type}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm">{injury.date}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm">{injury.duration}</td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                                                        <span className={`px-2 py-1 rounded-full text-xs ${
                                                            injury.status === 'Erholt' 
                                                                ? 'bg-emerald-50 text-emerald-700' 
                                                                : 'bg-amber-50 text-amber-700'
                                                        }`}>
                                                            {injury.status}
                                                        </span>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            ) : (
                                <p className="text-gray-500 text-sm">Keine Verletzungen in der Historie.</p>
                            )}
                        </div>
                    </div>
                );
            case 'development':
                return (
                    <div className="space-y-6">
                        {/* Development Goals */}
                        <div className="bg-white rounded-xl shadow-sm p-6">
                            <h3 className="text-lg font-semibold text-gray-800 mb-4">Entwicklungsziele</h3>
                            {player.development && player.development.goals && player.development.goals.length > 0 ? (
                                <ul className="list-disc pl-5 space-y-2">
                                    {player.development.goals.map((goal, idx) => (
                                        <li key={idx} className="text-gray-700">{goal}</li>
                                    ))}
                                </ul>
                            ) : (
                                <p className="text-gray-500 text-sm">Keine Entwicklungsziele definiert.</p>
                            )}
                        </div>
                        
                        {/* Recent Progress */}
                        <div className="bg-white rounded-xl shadow-sm p-6">
                            <h3 className="text-lg font-semibold text-gray-800 mb-4">Fortschritte</h3>
                            {player.development && player.development.recentProgress && player.development.recentProgress.length > 0 ? (
                                <div className="space-y-3">
                                    {player.development.recentProgress.map((progress, idx) => (
                                        <div key={idx} className="flex items-center justify-between p-3 rounded-lg bg-gray-50">
                                            <div>
                                                <span className="font-medium">{progress.skill}</span>
                                                <span className="text-gray-500 text-sm ml-2">{progress.date}</span>
                                            </div>
                                            <div className={`flex items-center ${progress.change > 0 ? 'text-emerald-600' : 'text-red-600'}`}>
                                                {progress.change > 0 ? <FaCaretUp /> : <FaCaretDown />}
                                                <span className="font-medium ml-1">{Math.abs(progress.change)}</span>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <p className="text-gray-500 text-sm">Keine Fortschritte verzeichnet.</p>
                            )}
                        </div>
                        
                        {/* Training Performance */}
                        {player.training && (
                            <div className="bg-white rounded-xl shadow-sm p-6">
                                <h3 className="text-lg font-semibold text-gray-800 mb-4">Trainingsdaten</h3>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <p className="text-sm text-gray-500">Trainingsbeteiligung</p>
                                        <p className="font-medium">{player.training.attendance || 0}%</p>
                                    </div>
                                    {player.training.specialProgram && (
                                        <div>
                                            <p className="text-sm text-gray-500">Spezialprogramm</p>
                                            <p className="font-medium">{player.training.specialProgram}</p>
                                        </div>
                                    )}
                                </div>
                                
                                {player.training.recentPerformance && player.training.recentPerformance.length > 0 && (
                                    <div className="mt-4">
                                        <p className="text-sm text-gray-500 mb-2">Leistung letzte 5 Trainingseinheiten</p>
                                        <div className="flex items-center space-x-1">
                                            {player.training.recentPerformance.map((perf, idx) => (
                                                <div 
                                                    key={idx} 
                                                    className="w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium"
                                                    style={{
                                                        backgroundColor: perf >= 90 ? '#dcfce7' : perf >= 80 ? '#e0f2fe' : perf >= 70 ? '#fef9c3' : '#fee2e2',
                                                        color: perf >= 90 ? '#166534' : perf >= 80 ? '#075985' : perf >= 70 ? '#854d0e' : '#b91c1c'
                                                    }}
                                                >
                                                    {perf}
                                                </div>
                                            ))}
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                );
            case 'personal':
                return (
                    <div className="space-y-6">
                        {/* Personal Info */}
                        {player.personalInfo && (
                            <div className="bg-white rounded-xl shadow-sm p-6">
                                <h3 className="text-lg font-semibold text-gray-800 mb-4">Persönliche Informationen</h3>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    {player.personalInfo.email && (
                                        <div>
                                            <p className="text-sm text-gray-500">E-Mail</p>
                                            <p className="font-medium">{player.personalInfo.email}</p>
                                        </div>
                                    )}
                                    {player.personalInfo.phone && (
                                        <div>
                                            <p className="text-sm text-gray-500">Telefon</p>
                                            <p className="font-medium">{player.personalInfo.phone}</p>
                                        </div>
                                    )}
                                    {player.personalInfo.emergencyContact && (
                                        <div>
                                            <p className="text-sm text-gray-500">Notfallkontakt</p>
                                            <p className="font-medium">{player.personalInfo.emergencyContact}</p>
                                        </div>
                                    )}
                                    {player.personalInfo.school && (
                                        <div>
                                            <p className="text-sm text-gray-500">Schule</p>
                                            <p className="font-medium">{player.personalInfo.school}</p>
                                        </div>
                                    )}
                                    {player.personalInfo.preferredFoot && (
                                        <div>
                                            <p className="text-sm text-gray-500">Bevorzugter Fuß</p>
                                            <p className="font-medium">{player.personalInfo.preferredFoot}</p>
                                        </div>
                                    )}
                                </div>
                            </div>
                        )}
                        
                        {/* Documents */}
                        <div className="bg-white rounded-xl shadow-sm p-6">
                            <h3 className="text-lg font-semibold text-gray-800 mb-4">Dokumente</h3>
                            {player.documents && player.documents.length > 0 ? (
                                <div className="space-y-2">
                                    {player.documents.map((doc, idx) => (
                                        <div key={idx} className="flex items-center justify-between p-3 rounded-lg border border-gray-100 hover:bg-gray-50">
                                            <div className="flex items-center">
                                                <div className="w-8 h-8 rounded-full bg-blue-50 text-blue-600 flex items-center justify-center mr-3">
                                                    <FaDownload size={14} />
                                                </div>
                                                <div>
                                                    <div className="font-medium">{doc.name}</div>
                                                    <div className="text-xs text-gray-500">Hinzugefügt am {doc.date}</div>
                                                </div>
                                            </div>
                                            <span className="text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-800">{doc.type}</span>
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <p className="text-gray-500 text-sm">Keine Dokumente vorhanden.</p>
                            )}
                        </div>
                    </div>
                );
            case 'notes':
                return (
                    <div className="space-y-6">
                        {/* Notes */}
                        <div className="bg-white rounded-xl shadow-sm p-6">
                            <h3 className="text-lg font-semibold text-gray-800 mb-4">Notizen</h3>
                            {player.notes && player.notes.length > 0 ? (
                                <div className="space-y-4">
                                    {player.notes.map((note, idx) => (
                                        <div key={idx} className="p-4 rounded-lg bg-gray-50">
                                            <div className="flex items-center justify-between mb-2">
                                                <span className="font-medium">{note.author}</span>
                                                <span className="text-xs text-gray-500">{note.date}</span>
                                            </div>
                                            <p className="text-gray-700">{note.text}</p>
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <p className="text-gray-500 text-sm">Keine Notizen vorhanden.</p>
                            )}
                        </div>
                    </div>
                );
            default:
                return null;
        }
    };

    return (
        <Layout>
            <div className="container mx-auto py-8 px-4 max-w-7xl">
                {loading ? (
                    <div className="flex justify-center items-center h-64">
                        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900"></div>
                    </div>
                ) : error ? (
                    <div className="bg-red-50 text-red-700 p-4 rounded-lg">
                        <p>{error}</p>
                    </div>
                ) : player ? (
                    <>
                        {/* Player Header */}
                        <div className="mb-6">
                            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-6">
                                <div className="flex items-center">
                                    <button 
                                        onClick={() => navigate('/team/players')}
                                        className="p-2 mr-4 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200"
                                    >
                                        <FaArrowLeft />
                                    </button>
                                    <h1 className="text-3xl font-bold text-gray-800">{player.name}</h1>
                                </div>
                                
                                <div className="flex items-center gap-3">
                                    {player.physicalAttributes && player.skills && (
                                        <div className="flex items-center bg-gray-100 text-gray-800 px-3 py-1 rounded-lg">
                                            <FaStar className="text-amber-500 mr-1" />
                                            <span className="font-medium">{calculatePlayerScore(player)}</span>
                                            <span className="text-xs text-gray-500 ml-1">{getScoreRating(calculatePlayerScore(player))}</span>
                                        </div>
                                    )}
                                    
                                    <button 
                                        onClick={() => navigate(`/team/players/edit/${id}`)}
                                        className="px-4 py-2 bg-amber-500 text-white font-medium rounded-lg hover:bg-amber-600 transition-colors flex items-center gap-2"
                                    >
                                        <FaEdit /> Bearbeiten
                                    </button>
                                </div>
                            </div>

                            {/* Tabs */}
                            <div className="border-b border-gray-200">
                                <nav className="flex space-x-4">
                                    <button 
                                        className={getTabClass('overview')}
                                        onClick={() => setActiveTab('overview')}
                                    >
                                        Übersicht
                                    </button>
                                    <button 
                                        className={getTabClass('medical')}
                                        onClick={() => setActiveTab('medical')}
                                    >
                                        Medizinisch
                                    </button>
                                    <button 
                                        className={getTabClass('development')}
                                        onClick={() => setActiveTab('development')}
                                    >
                                        Entwicklung
                                    </button>
                                    <button 
                                        className={getTabClass('personal')}
                                        onClick={() => setActiveTab('personal')}
                                    >
                                        Persönlich
                                    </button>
                                    <button 
                                        className={getTabClass('notes')}
                                        onClick={() => setActiveTab('notes')}
                                    >
                                        Notizen
                                    </button>
                                </nav>
                            </div>
                        </div>

                        {/* Tab Content */}
                        <div className="mt-6">
                            {renderTabContent()}
                        </div>
                    </>
                ) : (
                    <div className="text-center py-12">
                        <p className="text-gray-500">Spieler nicht gefunden.</p>
                    </div>
                )}
            </div>
        </Layout>
    );
};

export default PlayerProfile;
